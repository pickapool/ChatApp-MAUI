@using ChatApp_MAUI.Shared.Services

@inject IFormFactor _formFactor

<PageTitle>Login</PageTitle>

<div class="d-flex justify-content-center align-items-center ma-10" style="height: calc(100vh - 100px)">
    <MudItem xs="12" sm="8" md="6" lg="4" xl="3" xxl="3">
        <MudPaper Class="d-flex flex-column pa-4 paper-opacity gap-1 mt-2 px-10" Elevation="3" Width="100%" Height="auto">
            <div class="d-flex flex-row align-items-center gap-2 mt-6">
                @* <MudImage Class="logo" Src="/images/logo.png" Height="80" Width="80"></MudImage> *@
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.h4">WELCOME</MudText>
                    <MudText Typo="Typo.h4">Please sign in to continue.</MudText>
                </div>
            </div>
            <hr/>
            <MudText Typo="Typo.button">Email</MudText>
            <MudTextField 
            @onkeydown="HandleKeyDown" 
            @bind-Value="email"  
            Variant="Variant.Outlined" 
            Adornment="Adornment.End" 
            Margin="Margin.Dense"
            AdornmentIcon="@Icons.Material.Filled.Lock" />
            <MudText Typo="Typo.button">Password</MudText>
            <MudTextField 
            @onkeydown="HandleKeyDown" 
            @bind-Value="password" 
            Variant="Variant.Outlined"
            InputType="@PasswordInput" 
            Adornment="Adornment.End" 
            AdornmentIcon="@PasswordInputIcon" 
            Margin="Margin.Dense"
            OnAdornmentClick="ShowPassword" 
            AdornmentAriaLabel="Show Password" />
            <MudLink Class="mb-10"><i>Forgot Password?</i></MudLink>

            <MudText Class="text-center" Typo="Typo.caption">Don't have account yet?</MudText>
            <MudText Class="text-center" Typo="Typo.caption">
                <MudLink OnClick="RegisterClick" Class="mud-typography mud-typography-caption text-center">Create Account</MudLink>
            </MudText>
            <MudButton 
            Class="mb-5 color-main"
            OnClick="Login"
            Variant="Variant.Filled" 
            Size="Size.Large" 
            Color="Color.Primary">
                <div class="d-flex flex-row gap-2">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="align-self-start" Size="Size.Small" style="color: white;" Indeterminate></MudProgressCircular>
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <span>Sign in</span>
                    }

                </div>
            </MudButton>
        </MudPaper>
    </MudItem>
</div>

@code {
    [Parameter] public EventCallback OnRegistrationClick { get; set; }
    private string email = string.Empty, password = string.Empty;
    bool _open = false, isLoading = false, isShow = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private string factor => _formFactor.GetFormFactor();
    private string platform => _formFactor.GetPlatform();

    private async void RegisterClick()
    {
        await OnRegistrationClick.InvokeAsync();
    }
    private void ToggleDrawer()
    {
        _open = !_open;
    }
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Login();
        }
    }
    private async Task Login()
    {
        isLoading = true;
        await Task.Delay(500);
        StateHasChanged();
        if (String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))
        {
            Extensions.ShowSnackbar("All fields are required", Variant.Filled, _snackBar, Severity.Error);
            isLoading = false;
            return;
        }
        await Task.Delay(500);
        var account = new UserRecordArgs()
            {
                Email = email,
                Password = password,
            };
        try
        {
            var uid = await _loginService.Authenticate(account);
            await _localStorage.SetItemAsync("token", uid);
            ((CustomAuthenticationState)_authenticationStateProvider).NotifyUserAuthentication(uid);
            email = string.Empty;
            password = string.Empty;
            isLoading = false;
        }
        catch (Exception ex)
        {
            isLoading = false;
            if(ex.Message.ToLower().Contains("invalid"))
                Extensions.ShowSnackbar("Invalid email or password", Variant.Filled, _snackBar, Severity.Error);
            else
                Extensions.ShowSnackbar(ex.Message, Variant.Filled, _snackBar, Severity.Error);
        }
    }
    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}